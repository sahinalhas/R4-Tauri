name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run typecheck

      - name: Linting
        run: npm run lint

      - name: Format check
        run: npm run format

      - name: Run tests
        run: npm run test:coverage

      - name: Build frontend
        run: npm run build:frontend
        env:
          NODE_ENV: production

      - name: Check Rust code
        run: |
          cd src-tauri/app
          cargo check --all-targets
          cargo clippy -- -D warnings

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false

      - name: Create CI summary
        if: always()
        run: |
          echo "### ðŸ“Š CI Pipeline SonuÃ§larÄ±" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Type checking tamamlandÄ±" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Linting tamamlandÄ±" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Testler Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Frontend build baÅŸarÄ±lÄ±" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Rust kontrolÃ¼ tamamlandÄ±" >> $GITHUB_STEP_SUMMARY
