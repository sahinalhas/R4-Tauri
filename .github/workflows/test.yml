name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-frontend
          fail_ci_if_error: false

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: coverage/
          retention-days: 30

  backend-tests:
    name: Backend Tests (Rust)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Run Rust tests
        run: |
          cd src-tauri/app
          cargo test --all-features --workspace

      - name: Run Rust doc tests
        run: |
          cd src-tauri/app
          cargo test --doc --workspace

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run typecheck

      - name: ESLint
        run: npm run lint

      - name: Prettier format check
        run: npm run format

      - name: Rust format check
        run: |
          cd src-tauri/app
          cargo fmt --all -- --check

      - name: Rust clippy
        run: |
          cd src-tauri/app
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Quality summary
        if: always()
        run: |
          echo "### 🔍 Code Quality Kontrolleri" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend:**" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript type checking ✓" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint ✓" >> $GITHUB_STEP_SUMMARY
          echo "- Prettier ✓" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend:**" >> $GITHUB_STEP_SUMMARY
          echo "- Rust fmt ✓" >> $GITHUB_STEP_SUMMARY
          echo "- Clippy ✓" >> $GITHUB_STEP_SUMMARY
